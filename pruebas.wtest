import muros.*
import wollok.game.*
import jugador.*
import puntos.*
import niveles.*
import miscelaneos.*
import menus.*
import enemigos.*



describe "Gruop of test of the menu"{

  const menu_personaje = new MenuPersonaje()

  method initialize(){
    game.clear()
    game.cellSize(40)
    game.height(18)
    game.width(18)
    game.start()
  }

  test "Correct movement of selection box"{
    menu_personaje.cargar()
    menu_personaje.moverA().position(game.at(menu_personaje.moverA().position().x() + menu_personaje.cantidadDeIncrementoParaPosiciones(), menu_personaje.moverA().position().y()))
    keyboard.enter()
    assert.equals(game.at(7, 5), menu_personaje.moverA().position())
  }

  /*
    Testear si la selecciÃ³n se realiza correctamente.
  */
}

describe "Gruop of test for the map"{

  method initialize(){
    game.clear()
    game.cellSize(40)
    game.height(18)
    game.width(18)
    game.start()
    nivel_1.iniciar_mapa()
  }

  test "Well allocated blocks on the map"{
    assert.that(game.getObjectsIn(game.at(2, 2)).get(0).soyBloque())
    assert.that(game.getObjectsIn(game.at(2, 3)).get(0).soyBloque())
    assert.notThat(game.getObjectsIn(game.at(0, 0)).get(0).soyBloque())
  }

  test "Well allocated fruits on the map"{
    assert.equals(10, game.allVisuals().count({element => element.esFruta()}))
  }
}

describe "Group of test for the enemy" {


  method initialize(){
    game.clear()
    game.cellSize(40)
    game.height(18)
    game.width(18)
    game.start()
    nivel_testing.iniciar_mapa()
  }

  test "Should move"{
    const enemy = new Enemigo1(vida = 100, position = game.at(1, 2), velocidad = 0)
    game.addVisual(enemy)
    enemy.moverse()
    assert.equals(game.at(1, 1), enemy.position())
  }

  test "Should rotate direction" { // hacerlo sin el oncollide
    const enemy = new Enemigo1(vida = 100, position = game.at(1, 1), velocidad = 0)
    game.addVisual(enemy)
    enemy.cambiar_vector_movimiento()
    assert.equals(1, enemy.vector_movimiento().get(0))
  }

  test "Should turn back"{
    const enemy = new Enemigo1(vida = 100, position = game.at(1, 2), velocidad = 0)
    game.addVisual(enemy)
    enemy.moverse()
    enemy.volver()
    assert.equals(game.at(1, 2), enemy.position())
  }
}

describe "Group of tests for the player" {

  const jugador = new Jugador()

  method initialize(){
    game.clear()
    game.cellSize(40)
    game.height(18)
    game.width(18)
    game.start()
    jugador.posicionate()
  }

  test "Player spaw is correct" {
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the left wall"{
    jugador.position(game.at(0, 1))
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the right wall"{
    jugador.position(game.at(20, 1))
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the top wall"{
    jugador.position(game.at(1, 20))
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the bottom wall"{
    jugador.position(game.at(1, 0))
    assert.equals(game.at(1, 1), jugador.position())
  }
}