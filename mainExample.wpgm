import wollok.game.*

import example.*

import muros.*

object posicionAleatoria {
	method generarPosX() = 1.randomUpTo(39).truncate(0)
	method generarPosY() = 1.randomUpTo(20).truncate(0)

	method generarPosicionAleatoria(){
		const x = self.generarPosX()
		const y = self.generarPosY()
		
		if(escenario.mismaPosicion(game.at(x, y))){
			return self.generarPosicionAleatoria()
		}
		escenario.enlistarObjeto(game.at(x, y))
		return game.at(x, y)
	}
}

class Fruta{
	var property position = posicionAleatoria.generarPosicionAleatoria()

	method image(){
		if(points.frutasObtenidas() < 10){
			return "banana.png"
		}if(points.frutasObtenidas() < 20){
			return "uva2.png"
		}
		return "sandia.png"
	}

  	method esFruta() = true
  	method dibujar(){
		game.addVisual(self)
	}
}

object juego{
	const frutas = [new Fruta(), new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta()]
	method dibujarFrutas(){
		frutas.forEach({fruta_n => fruta_n.dibujar()})
	}
}

object fondo_de_pausa{
	var property position = game.origin()
	method image() = "pausa.png"
}

object ganaste{
	var property position = game.at(0,3)
	method image() = "ganaste.png"
}

program BadIceCreamGame {
	game.cellSize(40) //ancho del helado
	game.title("Bad Ice Cream")
	game.height(21)
	game.width(40)
	//dibujar muros
	muros.crearLaterales()
	//dibujar escenario
	escenario.generarEscenario()
	//dibujar frutas
	juego.dibujarFrutas()
	//dibujar puntos
	game.addVisual(points)
	//dibujar helado
	game.addVisualCharacter(helado)
	game.showAttributes(helado)
	game.start()
	
	keyboard.r().onPressDo({
		const nuevaFruta = interactuador.obtenerPrimerElemento("r"," sobre una fruta para recolectarla")
		if(nuevaFruta.esFruta()){
			helado.recolectar(nuevaFruta)
			points.sumarFrutas()
		}
		if(points.frutasObtenidas() == 10){
			juego.dibujarFrutas()
		}
		if(points.frutasObtenidas()==20){
			juego.dibujarFrutas()
		}
		if(points.frutasObtenidas() == 30){
			game.removeVisual(helado)
			game.addVisual(fondo_de_pausa)
			game.addVisual(ganaste)
			game.stop()
		}
	})
}

object interactuador{
    method obtenerPrimerElemento(key,accion){
      		const colliders = game.colliders(helado)
		if (colliders.isEmpty())
			throw new DomainException(message = "Apreta "+ key + accion, source = helado)
    return colliders.head()
    }
}
