import wollok.game.*
import example.*
import muros.*

object posicionAleatoria {
	method calcular() {
		const posicion = self.generarXY()
		return posicion
	}

	//((x == 3 && y == 3) || (x == 4 && y == 2) || (x == 5 && y == 2) || (x == 6 && y == 3)
	//|| (x == 2 && y == 4) || (x == 2 && y == 6) || (x == 2 && y == 7)
	//|| (x == 7 && y == 4) || (x == 7 && y == 6) || (x == 7 && y == 7))

	method generarPos() = 1.randomUpTo(8).truncate(0)

	method generarXY(){
		const x = self.generarPos()
		if(x == 2 || x == 7){
			const indice = 1.randomUpTo(3).truncate(0)
			if(indice == 1){
				const y = 1.randomUpTo(3).truncate(0)
				return game.at(x,y)
			} else if (indice == 2){
				const y = 5
				return game.at(x,y)
			} else {
				const y = 8
				return game.at(x,y)
			}
		} else if(x == 3 || x == 6){
			const indice = 1.randomUpTo(2).truncate(0)
			if(indice == 1){
				const y = 1.randomUpTo(2).truncate(0)
				return game.at(x,y)
			} else {
				const y = 4.randomUpTo(8).truncate(0)
				return game.at(x,y)
			}
		} else if(x == 4 || x == 5){
			const indice = 1.randomUpTo(2).truncate(0)
			if(indice == 1){
				const y = 1
				return game.at(x,y)
			} else {
				const y = 3.randomUpTo(8).truncate(0)
				return game.at(x,y)
			}
		} else {
			const y = self.generarPos()
			return game.at(x,y)
		}
	}
}

class Fruta{
	method image(){
		if(points.frutasObtenidas() < 10){
			return "banana.png"
		}if(points.frutasObtenidas() < 20){
			return "uva2.png"
		}
		return "sandia.png"
	}

	var property position = posicionAleatoria.calcular()
  	method esFruta() = true
	method soyBloque() = false
  	method dibujar(){
		game.addVisual(self)
	}
}
object juego{
	const frutas = [new Fruta(), new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta(),new Fruta()]
	method dibujarFrutas(){
		frutas.forEach({fruta_n => fruta_n.dibujar()})
	}
}

object fondo_de_pausa{
	var property position = game.origin()
	method image() = "pausa.png"
}

object ganaste{
	var property position = game.at(0,3)
	method image() = "ganaste.png"
}

program BadIceCreamGame {
	game.cellSize(40) //ancho del helado
	game.title("Bad Ice Cream")
	game.height(10)
	game.width(10)

	//dibujar muros
	muros.crearLaterales()
	//dibujar escenario
	escenario.generarEscenario()

//dibujar frutas
	juego.dibujarFrutas()
//dibujar puntos
	game.addVisual(points)
//dibujar helado
	game.addVisualCharacter(helado)
	game.showAttributes(helado)
	game.start()

	keyboard.r().onPressDo({
		const nuevaFruta = interactuador.obtenerPrimerElemento("r"," sobre una fruta para recolectarla")
		if(nuevaFruta.esFruta()){
			helado.recolectar(nuevaFruta)
			points.sumarFrutas()
		}
		if(points.frutasObtenidas() == 10){
			juego.dibujarFrutas()
		}
		if(points.frutasObtenidas()==20){
			juego.dibujarFrutas()
		}
		if(points.frutasObtenidas() == 30){
			game.removeVisual(helado)
			game.addVisual(fondo_de_pausa)
			game.addVisual(ganaste)
			game.stop()
		}
	})
}

object interactuador{
    method obtenerPrimerElemento(key,accion){
      		const colliders = game.colliders(helado)
		if (colliders.isEmpty())
			throw new DomainException(message = "Apreta "+ key + accion, source = helado)
    return colliders.head()
    }
}
