import wollok.game.*

import jugador.*

import muros.*

import puntos.*

import miscelaneos.*

program BadIceCreamGame {
	game.cellSize(40) //ancho del helado
	var fondo = "fondo slime.png"
	game.boardGround(fondo)
	game.title("Bad Ice Cream")
	game.height(18)
	game.width(18)
	//Inicio menu
	juego.menuPersonajes()
	//inicio
	game.start()

	//Juego puntos
	keyboard.r().onPressDo({
		const nuevaFruta = interactuador.obtenerPrimerElemento("r"," sobre una fruta para recolectarla")
		if(nuevaFruta.esFruta()){
			jugador.recolectar(nuevaFruta)
			points.sumarFrutas()
		}
		if(points.frutasObtenidas() == 10 || points.frutasObtenidas() == 20){
			spawn.dibujarFrutas()
		}
		if(points.frutasObtenidas() == 30){
			/*
			game.removeVisual(jugador)
			game.addVisual(ganaste)
			game.stop()
			*/
			juego.pantallaGanaste()
		}
	})
}

object juego{
	var inicio = false
	var seleccionado = 0
	method menuNiveles(){ //SELECCION DE NIVELES
		game.addVisual(menuNiveles)
		game.addVisual(seleccionNivel)
		keyboard.a().onPressDo({
			if(seleccionNivel.position().x() > 1){
				seleccionNivel.position(game.at(seleccionNivel.position().x()-2,seleccionNivel.position().y()))
				self.bloquear()
			}
		})
		keyboard.d().onPressDo({
			if(seleccionNivel.position().x() < 14){
				seleccionNivel.position(game.at(seleccionNivel.position().x()+2,seleccionNivel.position().y()))
				self.bloquear()
			}
		})
		keyboard.w().onPressDo({
			if(seleccionNivel.position().y() < 11){
				seleccionNivel.position(game.at(seleccionNivel.position().x(),seleccionNivel.position().y()+2))
				self.bloquear()
			}
		})
		keyboard.s().onPressDo({
			if(seleccionNivel.position().y() > 3){
				seleccionNivel.position(game.at(seleccionNivel.position().x(),seleccionNivel.position().y()-2))
				self.bloquear()
			}
		})
		keyboard.enter().onPressDo({
			if(seleccionado == 1){
				if(seleccionNivel.position() == game.at(1,11)){ //Seleccionado nivel 1
				escenario.generarLista(0)
				} else if(seleccionNivel.position() == game.at(3,11)){ //Seleccionado nivel 2
				escenario.generarLista(1)
				}
				game.removeVisual(menuNiveles)
				seleccionado = 2
				game.removeVisual(seleccionNivel)
				self.jugar()
			}
		})
	}

	method menuPersonajes(){ //SELECCION DE PERSONAJES
		game.addVisual(menuPersonajes)
		game.addVisual(siSeleccionado)
		keyboard.a().onPressDo({
			if(siSeleccionado.position().x() > 2) siSeleccionado.position(game.at(siSeleccionado.position().x()-5,5))
		})					
		keyboard.d().onPressDo({
			if(siSeleccionado.position().x() < 12) siSeleccionado.position(game.at(siSeleccionado.position().x()+5,5))
		})
		keyboard.enter().onPressDo({
			if(seleccionado == 0){
				if(siSeleccionado.position() == game.at(2,5)){
					jugador.valor(0)
				} else if (siSeleccionado.position() == game.at(7,5)){
					jugador.valor(1)
				} else if (siSeleccionado.position() == game.at(12,5)){
					jugador.valor(2)
				}
				game.removeVisual(menuPersonajes)
				game.removeVisual(siSeleccionado)
				seleccionado = 1
				self.menuNiveles()
			}
		})
	}

	method jugar(){ //DIBUJO DE LOS ELEMENTOS DEL MUNDO
		if(!inicio){
		//dibujar muros
		muros.crearLaterales()
		//dibujar escenario
		escenario.generarEscenario()
		//dibujar frutas
		spawn.dibujarFrutas()
		//dibujar puntos
		game.addVisual(points)
		//dibujar jugador
		game.addVisualCharacter(jugador)
		game.showAttributes(jugador)
		inicio = true
		}
	}

	method bloquear(){ //DIBUJAR MENSAJE DE "NIVEL NO DESBLOQUEADO"
		if(!inicio){
			if(bloqueados.any({bloqueado => bloqueado == seleccionNivel.position()})){
				game.addVisual(bloqueado)
			} else {
				game.removeVisual(bloqueado)
			}
		}
	}
	const bloqueados = [game.at(1,3),game.at(1,5),game.at(1,7),game.at(1,9), //lista de niveles a los que no se puede acceder
						game.at(3,3),game.at(3,5),game.at(3,7),game.at(3,9),
						game.at(5,3),game.at(5,5),game.at(5,7),game.at(5,9),game.at(5,11),
						game.at(7,3),game.at(7,5),game.at(7,7),game.at(7,9),game.at(7,11),
						game.at(9,3),game.at(9,5),game.at(9,7),game.at(9,9),game.at(9,11),
						game.at(11,3),game.at(11,5),game.at(11,7),game.at(11,9),game.at(11,11),
						game.at(13,3),game.at(13,5),game.at(13,7),game.at(13,9),game.at(13,11),
						game.at(15,3),game.at(15,5),game.at(15,7),game.at(15,9),game.at(15,11)]
	
	method pantallaGanaste(){ //Mostrar pantalla para cuando se gana y elegir si seguir jugando o no
		game.removeVisual(jugador)
		game.addVisual(ganaste)
		game.addVisual(seleccionGanaste)
		keyboard.a().onPressDo({
			if (seleccionGanaste.position().x() == 10) seleccionGanaste.position(game.at(6, 5))
		})
		keyboard.d().onPressDo({
			if (seleccionGanaste.position().x() == 6) seleccionGanaste.position(game.at(10, 5))
		})
		keyboard.enter().onPressDo({
			if (seleccionGanaste.position() == game.at(6, 5)) {
				game.removeVisual(seleccionGanaste)
				game.removeVisual(ganaste)
				seleccionado = 1
				self.menuNiveles()
			}
			if (seleccionGanaste.position() == game.at(10, 5)) game.stop()
		})
	}
}

object interactuador{
    method obtenerPrimerElemento(key,accion){
      		const colliders = game.colliders(jugador)
		if (colliders.isEmpty())
			throw new DomainException(message = "Apreta "+ key + accion, source = jugador)
    return colliders.head()
    }
}
