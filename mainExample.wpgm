import wollok.game.*

import jugador.*

import muros.*

import puntos.*

import miscelaneos.*

program BadIceCreamGame {
	game.cellSize(40) //ancho del helado
	game.title("Bad Ice Cream")
	game.height(18)
	game.width(18)
	//dibujar menu de personajes
	game.addVisual(menuPersonajes)
	game.addVisual(noSeleccionado)
	game.addVisual(siSeleccionado)
	//PersonalizaciÃ³n
	//Mundo
	juego.menuPersonajes()
	//inicio
	game.start()

	//Juego puntos
	keyboard.r().onPressDo({
		const nuevaFruta = interactuador.obtenerPrimerElemento("r"," sobre una fruta para recolectarla")
		if(nuevaFruta.esFruta()){
			jugador.recolectar(nuevaFruta)
			points.sumarFrutas()
		}
		if(points.frutasObtenidas() == 10 || points.frutasObtenidas() == 20){
			spawn.dibujarFrutas()
		}
		if(points.frutasObtenidas() == 30){
			game.removeVisual(jugador)
			game.addVisual(fondo_de_pausa)
			game.addVisual(ganaste)
			game.stop()
		}
	})
}

object juego{
	var inicio = false
	method menuNiveles(){
		keyboard.a().onPressDo({
			if(seleccion.position().x() > 1){
				seleccion.position(game.at(seleccion.position().x()-2,seleccion.position().y()))
				self.bloquear()
			}
		})
		keyboard.d().onPressDo({
			if(seleccion.position().x() < 14){
				seleccion.position(game.at(seleccion.position().x()+2,seleccion.position().y()))
				self.bloquear()
			}
		})
		keyboard.w().onPressDo({
			if(seleccion.position().y() < 11){
				seleccion.position(game.at(seleccion.position().x(),seleccion.position().y()+2))
				self.bloquear()
			}
		})
		keyboard.s().onPressDo({
			if(seleccion.position().y() > 3){
				seleccion.position(game.at(seleccion.position().x(),seleccion.position().y()-2))
				self.bloquear()
			}
		})
		keyboard.enter().onPressDo({
			if(seleccion.position() == game.at(1,11)){ //Seleccionado nivel 1
				escenario.generarLista(0)
			} else if(seleccion.position() == game.at(3,11)){ //Seleccionado nivel 2
				escenario.generarLista(1)
			}
			game.removeVisual(menuNiveles)
			game.removeVisual(seleccion)
			self.jugar()
		})
	}

	method menuPersonajes(){
		keyboard.a().onPressDo({
			noSeleccionado.direccion(0)
			siSeleccionado.direccion(1)
		})					
		keyboard.d().onPressDo({
			noSeleccionado.direccion(1)
			siSeleccionado.direccion(0)
		})
		keyboard.enter().onPressDo({
			if(noSeleccionado.position() == game.at(2,5)){
				jugador.valor(0)
			} else {
				jugador.valor(1)
			}
			game.removeVisual(menuPersonajes)
			game.removeVisual(noSeleccionado)
			game.removeVisual(siSeleccionado)
			game.addVisual(menuNiveles)
			game.addVisual(seleccion)
			self.menuNiveles()
		})
	}

	method jugar(){
		if(!inicio){
		//dibujar muros
		muros.crearLaterales()
		//dibujar escenario
		escenario.generarEscenario()
		//dibujar frutas
		spawn.dibujarFrutas()
		//dibujar puntos
		game.addVisual(points)
		//dibujar jugador
		game.addVisualCharacter(jugador)
		game.showAttributes(jugador)
		inicio = true
		}
	}

	method bloquear(){
		if(!inicio){
			if(bloqueados.any({bloqueado => bloqueado == seleccion.position()})){
				game.addVisual(bloqueado)
			} else {
				game.removeVisual(bloqueado)
			}
		}
	}
	const bloqueados = [game.at(1,3),game.at(1,5),game.at(1,7),game.at(1,9),
						game.at(3,3),game.at(3,5),game.at(3,7),game.at(3,9),
						game.at(5,3),game.at(5,5),game.at(5,7),game.at(5,9),game.at(5,11),
						game.at(7,3),game.at(7,5),game.at(7,7),game.at(7,9),game.at(7,11),
						game.at(9,3),game.at(9,5),game.at(9,7),game.at(9,9),game.at(9,11),
						game.at(11,3),game.at(11,5),game.at(11,7),game.at(11,9),game.at(11,11),
						game.at(13,3),game.at(13,5),game.at(13,7),game.at(13,9),game.at(13,11),
						game.at(15,3),game.at(15,5),game.at(15,7),game.at(15,9),game.at(15,11)]
}

object interactuador{
    method obtenerPrimerElemento(key,accion){
      		const colliders = game.colliders(jugador)
		if (colliders.isEmpty())
			throw new DomainException(message = "Apreta "+ key + accion, source = jugador)
    return colliders.head()
    }
}
